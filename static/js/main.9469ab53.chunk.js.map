{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","message","setMessage","contractAddress","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","wavePortal","abi","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","useEffect","onNewWave","from","timestamp","prevState","address","Date","on","off","className","role","aria-label","placeholder","onChange","event","target","value","onClick","map","index","style","backgroundColor","marginTop","padding","key","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9469ab53.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport wavePortal from './util/WavePortal.json';\n\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\tconst [allWaves, setAllWaves] = useState([]);\n\tconst [message, setMessage] = useState('');\n\tconst contractAddress = '0xf57bA2Ff818E6243Cf95E67C691f2D07187772BD';\n\n\tconst getAllWaves = async () => {\n\t\tconst { ethereum } = window;\n\n\t\ttry {\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst wavePortalContract = new ethers.Contract(\n\t\t\t\t\tcontractAddress,\n\t\t\t\t\twavePortal.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\t\t\t\tconst waves = await wavePortalContract.getAllWaves();\n\n\t\t\t\tconst wavesCleaned = waves.map((wave) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\taddress: wave.waver,\n\t\t\t\t\t\ttimestamp: new Date(wave.timestamp * 1000),\n\t\t\t\t\t\tmessage: wave.message,\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tsetAllWaves(wavesCleaned);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\tconsole.log('Make sure you have metamask!');\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tconsole.log('We have the ethereum object', ethereum);\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\t\tif (accounts.length !== 0) {\n\t\t\t\tconst account = accounts[0];\n\t\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\t\tsetCurrentAccount(account);\n\t\t\t} else {\n\t\t\t\tconsole.log('No authorized account found');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert('Get MetaMask!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: 'eth_requestAccounts',\n\t\t\t});\n\n\t\t\tconsole.log('Connected', accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst wave = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst wavePortalContract = new ethers.Contract(\n\t\t\t\t\tcontractAddress,\n\t\t\t\t\twavePortal.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\tlet count = await wavePortalContract.getTotalWaves();\n\t\t\t\tconsole.log('Retrieved total wave count...', count.toNumber());\n\n\t\t\t\tconst waveTxn = await wavePortalContract.wave(message, {\n\t\t\t\t\tgasLimit: 300000,\n\t\t\t\t});\n\t\t\t\tconsole.log('Mining...', waveTxn.hash);\n\n\t\t\t\tawait waveTxn.wait();\n\t\t\t\tconsole.log('Mined -- ', waveTxn.hash);\n\n\t\t\t\tcount = await wavePortalContract.getTotalWaves();\n\t\t\t\tconsole.log('Retrieved total wave count...', count.toNumber());\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\n\t\tlet wavePortalContract;\n\n\t\tconst onNewWave = (from, timestamp, message) => {\n\t\t\tconsole.log('NewWave', from, timestamp, message);\n\t\t\tsetAllWaves((prevState) => [\n\t\t\t\t...prevState,\n\t\t\t\t{\n\t\t\t\t\taddress: from,\n\t\t\t\t\ttimestamp: new Date(timestamp * 1000),\n\t\t\t\t\tmessage: message,\n\t\t\t\t},\n\t\t\t]);\n\t\t};\n\n\t\tif (window.ethereum) {\n\t\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\t\tconst signer = provider.getSigner();\n\n\t\t\twavePortalContract = new ethers.Contract(\n\t\t\t\tcontractAddress,\n\t\t\t\twavePortal.abi,\n\t\t\t\tsigner\n\t\t\t);\n\t\t\twavePortalContract.on('NewWave', onNewWave);\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (wavePortalContract) {\n\t\t\t\twavePortalContract.off('NewWave', onNewWave);\n\t\t\t}\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<div className=\"mainContainer\">\n\t\t\t<div className=\"dataContainer\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<span role=\"img\" aria-label=\"say-hi\">\n\t\t\t\t\t\tðŸ‘‹\n\t\t\t\t\t</span>{' '}\n\t\t\t\t\tHey there!\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"bio\">\n\t\t\t\t\tI am Rahil, software engineer at Thoughtworks. I am currently\n\t\t\t\t\texploring blockchain development!\n\t\t\t\t</div>\n\n\t\t\t\t<input\n\t\t\t\t\tplaceholder=\"Enter message\"\n\t\t\t\t\tonChange={(event) => setMessage(event.target.value)}\n\t\t\t\t></input>\n\n\t\t\t\t<button className=\"waveButton\" onClick={wave}>\n\t\t\t\t\tSay Hi!\n\t\t\t\t</button>\n\n\t\t\t\t{!currentAccount && (\n\t\t\t\t\t<button className=\"waveButton\" onClick={connectWallet}>\n\t\t\t\t\t\tConnect Wallet\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t{allWaves.map((wave, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tbackgroundColor: 'OldLace',\n\t\t\t\t\t\t\t\tmarginTop: '16px',\n\t\t\t\t\t\t\t\tpadding: '8px',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div>Address: {wave.address}</div>\n\t\t\t\t\t\t\t<div>Time: {wave.timestamp.toString()}</div>\n\t\t\t\t\t\t\t<div>Message: {wave.message}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}